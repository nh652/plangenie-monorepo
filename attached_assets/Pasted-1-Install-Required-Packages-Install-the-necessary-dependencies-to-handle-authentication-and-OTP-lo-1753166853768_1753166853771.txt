1. Install Required Packages
Install the necessary dependencies to handle authentication and OTP logic:

text
npm install express bcryptjs jsonwebtoken body-parser
express – Web framework.

bcryptjs – For securely hashing passwords.

jsonwebtoken – Creates and verifies JWT tokens.

body-parser – Parses incoming request bodies.

2. Create an In-Memory User Store
For demo purposes (before switching to a real database), use a plain JavaScript object to store user records.

js
// user in-memory store (replace with DB for production)
const users = {}; // e.g. { "user@email.com": { password: "<hashed>" } }
3. Create Signup and Login Endpoints
A. Signup Endpoint (/signup)
Collect email/phone and password.

Hash the password with bcrypt before storing.

js
const bcrypt = require('bcryptjs');
const express = require('express');
const app = express();
app.use(express.json());

const users = {};

app.post('/signup', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) return res.status(400).json({ error: 'Email & password required' });
  if (users[email]) return res.status(400).json({ error: 'User already exists' });

  const hash = await bcrypt.hash(password, 10);
  users[email] = { password: hash };
  res.json({ message: 'Signup successful' });
});
B. Login Endpoint (/login)
Check credentials, issue a JWT token if correct.

js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your_jwt_secret_here'; // Set via env in real projects

app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = users[email];
  if (!user) return res.status(400).json({ error: 'User not found' });
  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(400).json({ error: 'Wrong password' });

  const token = jwt.sign({ email }, JWT_SECRET, { expiresIn: '6h' });
  res.json({ token });
});
4. Add OTP Request and Verification Endpoints
Keep temporary OTPs in memory with an expiry timestamp.

js
const otps = {}; // { "destination": { code: "123456", expires: <timestamp> } }
A. Request OTP (/otp/request)
Generate a 6-digit OTP.

Save it with an expiry (e.g., 3 min).

In production, send SMS/email; in demo, just log it.

js
app.post('/otp/request', (req, res) => {
  const { to } = req.body;
  const code = String(Math.floor(100000 + Math.random() * 900000));
  otps[to] = { code, expires: Date.now() + 3 * 60 * 1000 };
  console.log(`OTP for ${to}: ${code}`); // In production, send via SMS/email
  res.json({ message: 'OTP sent' });
});
B. Verify OTP (/otp/verify)
Extract to and code from the request.

If valid, delete stored OTP and issue a JWT token to the client.

js
app.post('/otp/verify', (req, res) => {
  const { to, code } = req.body;
  const sent = otps[to];
  if (!sent || sent.code !== code || Date.now() > sent.expires) {
    return res.status(400).json({ error: 'Invalid or expired OTP' });
  }
  delete otps[to];
  const token = jwt.sign({ email: to }, JWT_SECRET, { expiresIn: '6h' });
  res.json({ token });
});
5. Secure the /query Endpoint With JWT Middleware
Add an authentication middleware that checks for the Authorization: Bearer <token> header and validates it.

js
function requireAuth(req, res, next) {
  const header = req.headers.authorization;
  const token = header && header.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Please log in' });
  try {
    req.user = jwt.verify(token, JWT_SECRET);
    next();
  } catch {
    res.status(401).json({ error: 'Invalid or expired token' });
  }
}
Usage with your protected routes:

js
app.post('/query', requireAuth, (req, res) => {
  // Now req.user.email is available!
  // ...rest of your plan logic...
});
6. Use Session Info in Endpoints
After authentication, retrieve the user session info from req.user (set by JWT middleware).

Optionally, use it for history/profile endpoints.

Example—add profile endpoint:

js
app.get('/profile', requireAuth, (req, res) => {
  const user = users[req.user.email];
  res.json({ email: req.user.email, registered: !!user });
});